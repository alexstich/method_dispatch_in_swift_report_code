sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

func main()

class A {
  @objc func B()
  @objc deinit
  init()
}

@_inheritsConvenienceInitializers class B : A {
  override func B()
  override init()
  @objc deinit
}

@_hasStorage @_hasInitialValue let b: B { get }

// b
sil_global hidden [let] @test_obj.b : test_obj.B : $B

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @test_obj.b : test_obj.B              // id: %2
  %3 = global_addr @test_obj.b : test_obj.B : $*B    // users: %8, %7
  %4 = metatype $@thick B.Type                    // user: %6
  // function_ref B.__allocating_init()
  %5 = function_ref @test_obj.B.__allocating_init() -> test_obj.B : $@convention(method) (@thick B.Type) -> @owned B // user: %6
  %6 = apply %5(%4) : $@convention(method) (@thick B.Type) -> @owned B // user: %7
  store %6 to %3 : $*B                            // id: %7
  %8 = load %3 : $*B                              // users: %9, %10
  %9 = class_method %8 : $B, #B.B : (B) -> () -> (), $@convention(method) (@guaranteed B) -> () // user: %10
  %10 = apply %9(%8) : $@convention(method) (@guaranteed B) -> ()
  %11 = integer_literal $Builtin.Int32, 0         // user: %12
  %12 = struct $Int32 (%11 : $Builtin.Int32)      // user: %13
  return %12 : $Int32                             // id: %13
} // end sil function 'main'

// main()
sil hidden @test_obj.main() -> () : $@convention(thin) () -> () {
bb0:
  %0 = tuple ()                                   // user: %1
  return %0 : $()                                 // id: %1
} // end sil function 'test_obj.main() -> ()'

// A.B()
sil hidden @test_obj.A.B() -> () : $@convention(method) (@guaranteed A) -> () {
// %0 "self"                                      // user: %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function 'test_obj.A.B() -> ()'

// @objc A.B()
sil private [thunk] @@objc test_obj.A.B() -> () : $@convention(objc_method) (A) -> () {
// %0                                             // users: %4, %3, %1
bb0(%0 : $A):
  strong_retain %0 : $A                           // id: %1
  // function_ref A.B()
  %2 = function_ref @test_obj.A.B() -> () : $@convention(method) (@guaranteed A) -> () // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> () // user: %5
  strong_release %0 : $A                          // id: %4
  return %3 : $()                                 // id: %5
} // end sil function '@objc test_obj.A.B() -> ()'

// A.deinit
sil hidden @test_obj.A.deinit : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1, implicit // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function 'test_obj.A.deinit'

// A.__deallocating_deinit
sil hidden @test_obj.A.__deallocating_deinit : $@convention(method) (@owned A) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1, implicit // id: %1
  // function_ref A.deinit
  %2 = function_ref @test_obj.A.deinit : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %5
  dealloc_ref %4 : $A                             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'test_obj.A.__deallocating_deinit'

// A.__allocating_init()
sil hidden [exact_self_class] @test_obj.A.__allocating_init() -> test_obj.A : $@convention(method) (@thick A.Type) -> @owned A {
// %0 "$metatype"
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // user: %3
  // function_ref A.init()
  %2 = function_ref @test_obj.A.init() -> test_obj.A : $@convention(method) (@owned A) -> @owned A // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
  return %3 : $A                                  // id: %4
} // end sil function 'test_obj.A.__allocating_init() -> test_obj.A'

// A.init()
sil hidden @test_obj.A.init() -> test_obj.A : $@convention(method) (@owned A) -> @owned A {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1, implicit // id: %1
  return %0 : $A                                  // id: %2
} // end sil function 'test_obj.A.init() -> test_obj.A'

// B.B()
sil hidden @test_obj.B.B() -> () : $@convention(method) (@guaranteed B) -> () {
// %0 "self"                                      // user: %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function 'test_obj.B.B() -> ()'

// @objc B.B()
sil private [thunk] @@objc test_obj.B.B() -> () : $@convention(objc_method) (B) -> () {
// %0                                             // users: %4, %3, %1
bb0(%0 : $B):
  strong_retain %0 : $B                           // id: %1
  // function_ref B.B()
  %2 = function_ref @test_obj.B.B() -> () : $@convention(method) (@guaranteed B) -> () // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> () // user: %5
  strong_release %0 : $B                          // id: %4
  return %3 : $()                                 // id: %5
} // end sil function '@objc test_obj.B.B() -> ()'

// B.__allocating_init()
sil hidden [exact_self_class] @test_obj.B.__allocating_init() -> test_obj.B : $@convention(method) (@thick B.Type) -> @owned B {
// %0 "$metatype"
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %3
  // function_ref B.init()
  %2 = function_ref @test_obj.B.init() -> test_obj.B : $@convention(method) (@owned B) -> @owned B // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
  return %3 : $B                                  // id: %4
} // end sil function 'test_obj.B.__allocating_init() -> test_obj.B'

// B.init()
sil hidden @test_obj.B.init() -> test_obj.B : $@convention(method) (@owned B) -> @owned B {
// %0 "self"                                      // user: %2
bb0(%0 : $B):
  %1 = alloc_stack [lexical] $B, let, name "self", implicit // users: %9, %3, %2, %10, %11
  store %0 to %1 : $*B                            // id: %2
  %3 = load %1 : $*B                              // user: %4
  %4 = upcast %3 : $B to $A                       // user: %6
  // function_ref A.init()
  %5 = function_ref @test_obj.A.init() -> test_obj.A : $@convention(method) (@owned A) -> @owned A // user: %6
  %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
  %7 = unchecked_ref_cast %6 : $A to $B           // users: %9, %12, %8
  strong_retain %7 : $B                           // id: %8
  store %7 to %1 : $*B                            // id: %9
  destroy_addr %1 : $*B                           // id: %10
  dealloc_stack %1 : $*B                          // id: %11
  return %7 : $B                                  // id: %12
} // end sil function 'test_obj.B.init() -> test_obj.B'

// B.deinit
sil hidden @test_obj.B.deinit : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject {
// %0 "self"                                      // users: %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1, implicit // id: %1
  %2 = upcast %0 : $B to $A                       // user: %4
  // function_ref A.deinit
  %3 = function_ref @test_obj.A.deinit : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
  return %4 : $Builtin.NativeObject               // id: %5
} // end sil function 'test_obj.B.deinit'

// B.__deallocating_deinit
sil hidden @test_obj.B.__deallocating_deinit : $@convention(method) (@owned B) -> () {
// %0 "self"                                      // users: %3, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1, implicit // id: %1
  // function_ref B.deinit
  %2 = function_ref @test_obj.B.deinit : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %5
  dealloc_ref %4 : $B                             // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function 'test_obj.B.__deallocating_deinit'

sil_vtable A {
  #A.B: (A) -> () -> () : @test_obj.A.B() -> ()	// A.B()
  #A.init!allocator: (A.Type) -> () -> A : @test_obj.A.__allocating_init() -> test_obj.A	// A.__allocating_init()
  #A.deinit!deallocator: @test_obj.A.__deallocating_deinit	// A.__deallocating_deinit
}

sil_vtable B {
  #A.B: (A) -> () -> () : @test_obj.B.B() -> () [override]	// B.B()
  #A.init!allocator: (A.Type) -> () -> A : @test_obj.B.__allocating_init() -> test_obj.B [override]	// B.__allocating_init()
  #B.deinit!deallocator: @test_obj.B.__deallocating_deinit	// B.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'test_obj/test_obj.swift' => 'test_obj.swift'


